package es.unican.istr.rtgen.generators;

import es.unican.istr.rtgen.EvaluationEngine;
import es.unican.istr.rtgen.ResultsManager;
import es.unican.istr.rtgen.generators.config.GeneratorConfig;
import es.unican.istr.rtgen.generators.config.UtilizationGeneratorConfig;
import es.unican.istr.rtgen.storers.UtilizationGeneratorResultsManager;
import es.unican.istr.rtgen.storers.config.StorerConfig;
import es.unican.istr.rtgen.system.LinearSystem;
import es.unican.istr.rtgen.system.config.SystemConfig;
import es.unican.istr.rtgen.tool.Tool;
import es.unican.istr.rtgen.tool.config.ToolConfig;
import org.apache.commons.io.FilenameUtils;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.UUID;

/**
 * Created by juanm on 17/01/2016.
 */
public class UtilizationEvaluationEngine<LS extends LinearSystem, RTT extends Tool>
        extends EvaluationEngine<LS, RTT> {

    ///////////////////////////
    // Implementation Fields //
    ///////////////////////////

    private Class<UtilizationGeneratorConfig> configType;


    //////////////////
    // Constructors //
    //////////////////

    public UtilizationEvaluationEngine(SystemConfig sysConfig, ToolConfig toolConfig,
                                       ResultsManager resultsManager, GeneratorConfig seriesConfig){
        super(sysConfig, toolConfig, resultsManager, seriesConfig);
    }


    //////////////////////////////
    // Series EvaluationEngine Methods //
    //////////////////////////////

    @Override
    public void run() {

        String hostname = "Unknown";
        try
        {
            InetAddress addr;
            addr = InetAddress.getLocalHost();
            hostname = addr.getHostName();
            System.out.printf("EvaluationEngine started execution in %s\n", hostname);
        }
        catch (UnknownHostException ex)
        {
            System.out.println("Hostname can not be resolved");
        }


        // Cast configuration handler, assumes UtilizationSeriesConfigHandler is provided
        UtilizationGeneratorConfig uSeriesConfig = (UtilizationGeneratorConfig) getGenConfig();

        // Cast results handler, assumes UtilizationSeriesResultsHandler is provided
        UtilizationGeneratorResultsManager uResultsHandler = (UtilizationGeneratorResultsManager) getResultsManager();
        //System.out.println(uResultsHandler);

        // Total time for the execution of the series
        long totalSeriesTime = 0;

        // Calculate random id for this series (files generated by this series are saved in this random folder)
        String uuid = UUID.randomUUID().toString();
        System.out.printf(" %s started:", uuid);

        try {
            // Instantiate Tool
            RTT tool = getTRTTool().getDeclaredConstructor(String.class).newInstance(uuid);

            // Utilization Series Loop
            int maximumSchedulableUtilization = 0;
            boolean interrupted = false;

            for (int u=uSeriesConfig.getUtilizationStart();
                 u<=uSeriesConfig.getUtilizationTop();
                 u+=uSeriesConfig.getUtilizationStep()) {

                //System.out.printf("%d ", u);

                // Set current utilization in the series
                getSysConfig().getUtilization().setUtilization(u);

                // Create system
                //System.out.println(getTLinearSystem());
                Constructor<?> constructor = getTLinearSystem().getConstructor(SystemConfig.class);
                LS sys = getTLinearSystem().getDeclaredConstructor(SystemConfig.class).newInstance(getSysConfig());

                try {
                    // Analyze system (results saved in system)
                    System.out.printf(" %d", u);
                    tool.analyze(sys, getToolConfig());

                    // Update total series time
                    totalSeriesTime += sys.getToolTimeElapsed();

                    // Store system results
                    uResultsHandler.storeSystemResults(sys);
                    System.out.printf(".");

                    // Break loop at first non schedulable system in the series
                    if (!sys.isSchedulable()){
                        break;
                    }

                    // Update maximum schedulable utilization
                    maximumSchedulableUtilization = u;

                } catch (Exception e){
                    interrupted = true;
                    e.printStackTrace();
                    // Some error in the analysis, for example it timed-out.
                    break;
                }

            }
            System.out.printf("\n %s finished\n", uuid);

            // Store series results
            if (!interrupted) {
                // Only store series results if the series was not interrupted
                uResultsHandler.storeSeriesResults(
                        getSysConfig(), getToolConfig(),
                        uSeriesConfig.getUtilizationStart(), uSeriesConfig.getUtilizationTop(),
                        uSeriesConfig.getUtilizationStep(),
                        maximumSchedulableUtilization, totalSeriesTime);
            }

            // Clean files created by the tool
            if (uSeriesConfig.getCleanAfterwards()){
                tool.clean();
            }


        } catch (InstantiationException|IllegalAccessException|NoSuchMethodException|InvocationTargetException e) {
            e.printStackTrace();
        }
    }


    /////////////////
    // Main Method //
    /////////////////

    /*
    This method launches UtilizationEvaluationEngine.run() from the command line
    This procedure is used by the Cluster-Torque dispatcher to launch the generator
    Parameters are given in args
     */
    public static void main(String[] args) {

        if (args.length != 44){
            System.out.printf("ERROR: 44 arguments expected, %d received\n", args.length);
            return;
        }

        // Pointer inside args
        Integer argc = 0;


        ///////////////
        // Id number //
        ///////////////

        Integer id =  Integer.parseInt(args[argc++]);


        /////////////////////////////
        // Configuration file path //
        /////////////////////////////

        String configFilePath = args[argc++];


        ///////////////////////////////////
        // LinearSystem and Tool classes //
        ///////////////////////////////////

        Class<?> TLinearSystem = null;
        Class<?> TTool = null;
        try{
            TLinearSystem = Class.forName(args[argc++]);
            TTool = Class.forName(args[argc++]);

        } catch (ClassNotFoundException e){
            e.printStackTrace();
        }


        ////////////////////////////
        // GeneratorConfig Params //
        ////////////////////////////

        Class<?> TGeneratorConfig;
        GeneratorConfig generatorConfig = null;
        try {
            TGeneratorConfig = Class.forName(args[argc++]);

            // Instantiate GeneratorConfig
            Constructor<?> c = TGeneratorConfig.getConstructor(String.class);
            generatorConfig = (GeneratorConfig) c.newInstance(configFilePath);

        } catch (ClassNotFoundException|NoSuchMethodException|InstantiationException|IllegalAccessException|
                InvocationTargetException e) {
            e.printStackTrace();
        }


        ///////////////////
        // ResultsManager params //
        ///////////////////

        Class<?> TStorerConfig;
        Class<?> TStorer;
        ResultsManager resultsManager = null;
        StorerConfig storerConfig = null;
        try{
            TStorerConfig = Class.forName(args[argc++]);
            TStorer = Class.forName(args[argc++]);

            // Instantiate StorerConfig
            Constructor<?> c = TStorerConfig.getConstructor(String.class);
            storerConfig = (StorerConfig) c.newInstance(configFilePath);

            // Change location of results file to a database for this cluster-job
            String prevLoc = storerConfig.getResultsFileLocation();
            String newLoc = FilenameUtils.concat(
                    FilenameUtils.getPath(prevLoc),
                    String.format("%s%d.%s", FilenameUtils.getBaseName(prevLoc),
                                             id,
                                             FilenameUtils.getExtension(prevLoc)));
            storerConfig.setResultsFileLocation(newLoc);

            // Instantiate ResultsManager
            Constructor<?> c2 = TStorer.getConstructor(StorerConfig.class);
            resultsManager = (ResultsManager) c2.newInstance(storerConfig);


        } catch (ClassNotFoundException|NoSuchMethodException|InstantiationException|IllegalAccessException|
                InvocationTargetException e){
            e.printStackTrace();
        }


        /////////////////////////////
        // Params for SystemConfig //
        /////////////////////////////

        SystemConfig systemConfig = null;
        try {
            Class<?> TSystemConfig = Class.forName(args[argc++]);           // SystemConfig class
            Integer nSystemConfigParams = Integer.parseInt(args[argc++]);   // Number of SystemConfig params
            String[] systemConfigParams = Arrays.copyOfRange(args, argc, argc+nSystemConfigParams);
            argc += nSystemConfigParams;

            // Instantiate SystemConfig
            Constructor<?> c = TSystemConfig.getConstructor();
            systemConfig = (SystemConfig) c.newInstance();
            systemConfig.initWihArgs(systemConfigParams);

        } catch (ClassNotFoundException|NoSuchMethodException|InstantiationException|IllegalAccessException|
                InvocationTargetException e) {
            e.printStackTrace();
        }


        ///////////////////////////
        // Params for ToolConfig //
        ///////////////////////////

        ToolConfig toolConfig = null;
        try {
            Class<?> TToolConfig = Class.forName(args[argc++]);
            Integer nToolConfigParams = Integer.parseInt(args[argc++]);
            String[] toolConfigParams = Arrays.copyOfRange(args, argc, argc+nToolConfigParams);
            argc += nToolConfigParams;

            // Instantiate ToolConfig
            Constructor<?> c = TToolConfig.getConstructor();
            toolConfig = (ToolConfig) c.newInstance();
            toolConfig.initWihArgs(toolConfigParams);

        } catch (ClassNotFoundException|NoSuchMethodException|InstantiationException|IllegalAccessException|
                InvocationTargetException e) {
            e.printStackTrace();
        }


        /////////////////////////////////////////////////////
        // Prepare and launch an instance of the EvaluationEngine //
        /////////////////////////////////////////////////////

        UtilizationEvaluationEngine gen = new UtilizationEvaluationEngine(systemConfig, toolConfig, resultsManager, generatorConfig);
        gen.setRTTool(TTool);
        gen.setLinearSystem(TLinearSystem);
        gen.run();
    }
}
